{"version":3,"sources":["game/utils.js","game/rules.js","game/ai.js","game/reducer.js","grid/Cell.js","grid/Row.js","grid/Grid.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["indexOf","r","c","WIDTH","range","n","Array","from","_","i","RED","YELLOW","HEIGHT","makeMove","state","move","player","columnIndex","cells","Object","toConsumableArray","playerTurn","getAvailableMoves","reduce","acc","concat","checkWinner","cell","checkHorizontal","checkVertical","checkDiagonalLeft","checkDiagonalRight","isGameOver","length","getScore","winner","score","createAI","_ref","_ref$maxDepth","maxDepth","getMove","list","bestScore","Number","NEGATIVE_INFINITY","moveMap","map","alphaBeta","_ref2","depth","alpha","beta","maximizingPlayer","value","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","nextState","Math","max","err","return","POSITIVE_INFINITY","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","min","has","set","get","Map","size","floor","random","initialState","fill","reducer","action","type","payload","computerMove","handleComputer","Error","Cell","children","react_default","a","createElement","className","Row","Grid","gameState","onCellClick","rows","buttonClass","join","src_grid_Cell","key","onClick","src_grid_Row","Game","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","_useState","useState","_useState2","message","setMessage","useEffect","draw","src_grid_Grid","isValidMove","App","src_Game_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e0ad045.chunk.js","sourcesContent":["import { WIDTH } from \"./rules\";\n\n\nexport function indexOf(r, c) {\n    return r * WIDTH + c;\n}\n\nexport function range(n) {\n    return Array.from(new Array(n), (_, i) => i);\n}","import { indexOf, range } from \"./utils\";\n\nexport const RED = 'red';\nexport const YELLOW = 'yellow';\n\nexport const WIDTH = 7;\nexport const HEIGHT = 6;\n\nexport function makeMove(state, move) {\n    const { player, columnIndex } = move;\n    const cells = [...state.cells];\n    let r = HEIGHT - 1;\n    for (; r >= 0; r--) {\n        if (!cells[indexOf(r, columnIndex)]) {\n            break;\n        }\n    }\n    cells[indexOf(r, columnIndex)] = player;\n    const playerTurn = player !== RED ? RED : YELLOW;\n    return { cells, playerTurn };\n}\n\nexport function getAvailableMoves(state) {\n    const { cells, playerTurn } = state;\n    return range(WIDTH).reduce((acc, c) => {\n        if (!cells[indexOf(0, c)]) {\n            return acc.concat({ player: playerTurn, columnIndex: c });\n        }\n        return acc;\n    }, []);\n}\n\nexport function checkWinner(state) {\n    return checkHorizontal(state) || checkVertical(state) || checkDiagonalLeft(state) || checkDiagonalRight(state);\n}\n\nexport function isGameOver(state) {\n    return checkWinner(state) || getAvailableMoves(state).length === 0;\n}\n\nexport function getScore(state) {\n    const winner = checkWinner(state);\n    let score = 0;\n    // X is the human player. We attribute a negative score to the human player.\n    if (winner === RED) {\n        score = -(1 + getAvailableMoves(state).length);\n    } else if (winner === YELLOW) {\n        score = 1 + getAvailableMoves(state).length;\n    }\n    return score;\n}\n\nexport function isValidMove(state, columnIndex) {\n    const { cells } = state;\n    return !(cells[indexOf(0, columnIndex)] || isGameOver(state));\n}\n\nfunction checkHorizontal(state) {\n    const { cells } = state;\n    for (let r = 0; r < HEIGHT; r++) {\n        for (let c = 0; c < WIDTH - 3; c++) {\n            const cell = cells[indexOf(r, c)];\n            if (cell\n                && cell === cells[indexOf(r, c + 1)]\n                && cell === cells[indexOf(r, c + 2)]\n                && cell === cells[indexOf(r, c + 3)]) {\n                return cell;\n            }\n        }\n    }\n}\n\nfunction checkVertical(state) {\n    const { cells } = state;\n    for (let r = 0; r < HEIGHT - 3; r++) {\n        for (let c = 0; c < WIDTH; c++) {\n            const cell = cells[indexOf(r, c)];\n            if (cell\n                && cell === cells[indexOf(r + 1, c)]\n                && cell === cells[indexOf(r + 2, c)]\n                && cell === cells[indexOf(r + 3, c)]) {\n                return cell;\n            }\n        }\n    }\n}\n\nfunction checkDiagonalLeft(state) {\n    const { cells } = state;\n    for (let r = 3; r < HEIGHT; r++) {\n        for (let c = 3; c < WIDTH; c++) {\n            const cell = cells[indexOf(r, c)];\n            if (cell\n                && cell === cells[indexOf(r - 1, c - 1)]\n                && cell === cells[indexOf(r - 2, c - 2)]\n                && cell === cells[indexOf(r - 3, c - 3)]) {\n                return cell;\n            }\n        }\n    }\n}\n\nfunction checkDiagonalRight(state) {\n    const { cells } = state;\n    for (let r = 3; r < HEIGHT; r++) {\n        for (let c = 0; c < WIDTH - 3; c++) {\n            const cell = cells[indexOf(r, c)];\n            if (cell\n                && cell === cells[indexOf(r - 1, c + 1)]\n                && cell === cells[indexOf(r - 2, c + 2)]\n                && cell === cells[indexOf(r - 3, c + 3)]) {\n                return cell;\n            }\n        }\n    }\n}","export function createAI({ isGameOver, getScore, getAvailableMoves, makeMove, maxDepth = 6 }) {\n\n    function alphaBeta({ state, depth, alpha, beta, maximizingPlayer }) {\n        if (depth === 0 || isGameOver(state)) {\n            return getScore(state);\n        }\n        if (maximizingPlayer) {\n            let value = Number.NEGATIVE_INFINITY;\n            for (const move of getAvailableMoves(state)) {\n                const nextState = makeMove(state, move);\n                value = Math.max(value, alphaBeta({ state: nextState, depth: depth - 1, alpha, beta, maximizingPlayer: false }));\n                alpha = Math.max(alpha, value);\n                if (alpha >= beta) {\n                    break; // beta cut-off\n                }\n            }\n            return value;\n        } else {\n            let value = Number.POSITIVE_INFINITY;\n            for (const move of getAvailableMoves(state)) {\n                const nextState = makeMove(state, move);\n                value = Math.min(value, alphaBeta({ state: nextState, depth: depth - 1, alpha, beta, maximizingPlayer: true }));\n                beta = Math.min(beta, value);\n                if (alpha >= beta) {\n                    break; // alpha cut-off\n                }\n            }\n            return value;\n        }\n    }\n\n    const getMove = (state) => {\n        let bestScore = Number.NEGATIVE_INFINITY;\n        const moveMap = getAvailableMoves(state).reduce((map, move) => {\n            const score = alphaBeta({ state: makeMove(state, move), depth: maxDepth, alpha: Number.NEGATIVE_INFINITY, beta: Number.POSITIVE_INFINITY, maximizingPlayer: false });\n            if (score > bestScore) {\n                bestScore = score;\n            }\n            if (map.has(score)) {\n                map.set(score, map.get(score).concat(move));\n            } else {\n                map.set(score, [move]);\n            }\n            return map;\n        }, new Map());\n        return moveMap.size > 0 ? chooseRandom(moveMap.get(bestScore)) : null;\n    };\n\n    return { getMove };\n}\n\nfunction chooseRandom(list) {\n    return list[Math.floor(Math.random() * list.length)];\n}","import { getAvailableMoves, getScore, isGameOver, makeMove, RED } from \"./rules\";\nimport { createAI } from \"./ai\";\n\nexport function initialState() {\n    return { cells: Array(42).fill(null), playerTurn: RED }\n}\n\nexport function reducer(state, action) {\n    switch (action.type) {\n        case 'move':\n            return makeMove(state, action.payload);\n        case 'computer':\n            return handleComputer(state);\n        case 'reset':\n            return initialState();\n        default:\n            throw new Error();\n    }\n}\n\nfunction handleComputer(state) {\n    const computerPlayer = createAI({ isGameOver, getScore, makeMove, getAvailableMoves });\n    const computerMove = computerPlayer.getMove(state);\n    return computerMove ? makeMove(state, computerMove) : state;\n}","import React from 'react';\nimport './Cell.css'\n\nconst Cell = ({children}) => (\n    <div className=\"cell\">\n        {children}\n    </div>\n);\n\nexport default Cell;","import React from 'react';\nimport './Row.css';\n\nconst Row = ({ children }) => (\n    <div className=\"row\">\n        {children}\n    </div>\n);\n\nexport default Row;","import React from 'react';\nimport './Grid.css';\nimport { indexOf, range } from \"../game/utils\";\nimport { HEIGHT, WIDTH } from \"../game/rules\";\nimport Cell from \"./Cell\";\nimport Row from \"./Row\";\n\nconst Grid = ({ gameState, onCellClick }) => {\n    const rows = range(HEIGHT).map(r => {\n        const cells = range(WIDTH).map(c => {\n            const buttonClass = ['circle', 'clickable', gameState.cells[indexOf(r, c)] || 'white'].join(' ');\n            return (\n                <Cell key={'col-' + c}>\n                    <div className=\"box\" onClick={onCellClick(c)}>\n                        <button className={buttonClass}/>\n                    </div>\n                </Cell>\n            )\n                ;\n        });\n        return (\n            <Row key={'row-' + r}>\n                {cells}\n            </Row>\n        )\n    });\n\n    return (\n        <div className=\"table\">\n            {rows}\n        </div>\n    )\n};\n\nexport default Grid;","import React, { useEffect, useReducer, useState } from 'react';\nimport { initialState, reducer } from \"./game/reducer\";\nimport { checkWinner, getAvailableMoves, isValidMove, RED, YELLOW } from \"./game/rules\";\nimport Grid from \"./grid/Grid\";\nimport './Game.css';\n\nconst Game = () => {\n    const [gameState, dispatch] = useReducer(reducer, initialState());\n    const [message, setMessage] = useState('');\n    // update message\n    useEffect(() => {\n        const winner = checkWinner(gameState);\n        const draw = !winner && getAvailableMoves(gameState).length === 0;\n        if (winner === RED) {\n            setMessage('Player 1 (red) wins!');\n        } else if (winner === YELLOW) {\n            setMessage('Player 2 (yellow) wins!');\n        } else if (draw) {\n            setMessage('Draw game.');\n        }\n    }, [gameState]);\n    // computer turn\n    useEffect(() => {\n        if (gameState.playerTurn === YELLOW) {\n            dispatch({ type: 'computer' });\n        }\n    }, [gameState.playerTurn]);\n\n\n    const handleCellClick = (columnIndex) => () => {\n        if (!isValidMove(gameState, columnIndex) || gameState.playerTurn !== RED) {\n            return null;\n        }\n        dispatch({ type: 'move', payload: { player: RED, columnIndex } });\n    };\n\n    const handleNewGameClick = () => {\n        setMessage('');\n        dispatch({ type: 'reset' });\n    };\n\n    return (\n        <div>\n            <button className=\"button\" onClick={handleNewGameClick}>New Game</button>\n            <Grid gameState={gameState} onCellClick={handleCellClick}/>\n            <p className=\"message\">{message}</p>\n        </div>\n    );\n};\nexport default Game;","import React from 'react';\nimport Game from './Game';\n\nconst App = () => (\n    <div>\n        <h1 className=\"animated fadeInRightBig\">Connect 4</h1>\n        <Game/>\n    </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}